                         +-----------------+
                         |    COMP 7035    |
                         |   Assigment 1   |
                         |      Report     |
                         +-----------------+

---- GROUP ----

Ashakan Zahedanaraki <ashkanzahde@gmail.com>
Gagan Bahugun <gbahugun@my.bcit.ca>

---- PRELIMINARIES ----

None.

                              Timer_Sleep
                                 ====

---- DATA STRUCTURES ----

Added to struct thread in thread.h:

    /* The tick when the thread should wake up. */
    int64_t wake_up_tick;

Added to thread.c:

    /* List of processes in THREAD_SLEEP state, that is, processes
       that are waiting for a certain time to elapse before they
       can transition to ready or running state. */
    static struct list sleep_list;

---- ALGORITHMS ----

timer_sleep() - First it checks if ticks are less than or equal to zero and immediately returns if they are.
Then it sets the wake_up_tick of the current thread to when the thread should wake up.
Finally, it calls thread_sleep to put the current thread to sleep.

timer_interrupt() - First it increases ticks by one.
Then it calls thread_tick to update thread statistics.
Finally, it calls thread_wake to wake up any threads that are ready to wake up.

thread_asleep() - Switches the status of the current thread to THREAD_ASLEEP and then calls the scheduler.

thread_sleep() - If the current thread isn't the idle thread then add it to the sleep_list and put it to sleep.

thread_wake() - Loop through all the threads in sleep_list and check if they should wake up. If the first thread
in the list shouldn't wake up then break the loop. Otherwise, remove the thread from the sleep_list, add the
thread to the ready_list and switch the thread's status to THREAD_READY.

earlier_wake_up() - Comparator that compares the wake_up_tick of two threads.
Returns true if the wake_up_tick of the first thread is less than the wake_up_tick of the second thread.
Otherwise, returns false.


---- SYNCHRONIZATION ----

Interrupts are turned off during operations on the ready_list and sleep_list
and changing the status of the current thread.
There should be no other synchronization issues.

---- RATIONALE ----

Using the sleep_list with the earlier_wake_up() comparator function 
ensures that threads are kept in the order of their wake-up times. 
This optimizes the wake-up operation because we only need to check 
the earliest wake-up times instead of traversing the entire list.

On the other hand, The design heavily relies on tick counts to manage thread wake-ups. 
If there are inaccuracies or issues with the tick counting mechanism, 
this could affect the wake-up functionality. also while the ordered sleep_list is efficient 
for moderate numbers of sleeping threads, it could become less efficient 
as the number of sleeping threads grows significantly large. 
Insertions in an ordered list could become a bottleneck.